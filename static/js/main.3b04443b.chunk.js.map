{"version":3,"sources":["Go_youtube.js","Card.js","CardList.js","Compare.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Go_youtube","Card","title","opening_crawl","director","producer","release_date","className","href","target","rel","CardList","films","map","user","i","key","Compare","a","b","UrlA","url","toUpperCase","UrlB","comparison","Scroll","props","style","overflowY","height","children","App","state","fetch","then","response","json","results","sort","movies","setState","this","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOACaA,G,MAAa,CAC1B,aAAc,8CACd,uBAAwB,8CACxB,qBAAsB,8CACtB,sBAAuB,8CACvB,qBAAsB,8CACtB,0BAA2B,8CAC3B,oBAAqB,gDCcNC,EAnBF,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,cAAcC,EAAoC,EAApCA,SAASC,EAA2B,EAA3BA,SAASC,EAAkB,EAAlBA,aACrD,OACC,yBAAKC,UAAY,mEAChB,6BACC,wBAAIA,UAAU,eACb,uBAAGA,UAAY,eACfC,KAAQR,EAAWE,GACnBO,OAAO,SACPC,IAAI,uBAHJ,IAIGR,EAJH,MAMD,4CAAkBI,EAAlB,uBAAoDF,EAApD,2BACgBC,GAEhB,2BAAIF,MCQOQ,EAtBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAElB,OACC,6BAECA,EAAMC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAO,EACPd,MAAOU,EAAMG,GAAGb,MAChBC,cAAeS,EAAMG,GAAGZ,cACxBC,SAAUQ,EAAMG,GAAGX,SACnBC,SAAUO,EAAMG,GAAGV,SACnBC,aAAcM,EAAMG,GAAGT,oBCFZW,MAbf,SAAiBC,EAAGC,GAClB,IAAMC,EAAOF,EAAEG,IAAIC,cACbC,EAAOJ,EAAEE,IAAIC,cAEfE,EAAa,EAMjB,OALIJ,EAAOG,EACTC,EAAa,EACJJ,EAAOG,IAChBC,GAAc,GAETA,GCCMC,EAVA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAE1BC,OAAQ,UACPH,EAAMI,WC8BMC,E,YA9Bb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXpB,MAAO,IAHI,E,iFAOG,IAAD,OACjBqB,MAAM,+BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIA,EAASE,WAC1BH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,KAAKrB,MAC/BiB,MAAK,SAAAK,GAAM,OAAI,EAAKC,SAAS,CAAC5B,MAAO2B,S,+BAE9B,IACD3B,EAAS6B,KAAKT,MAAdpB,MACP,OACA,yBAAKL,UAAY,MACf,4BAAQA,UAAU,iBAChB,wBAAIA,UAAW,SAAf,cACA,yBAAKA,UAAY,kBAAkBmC,IAAI,WAAWC,IAAM,gHAE1D,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU/B,MAASA,U,GAxBTgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3b04443b.chunk.js","sourcesContent":["\nexport const Go_youtube = {\n'A New Hope': 'https://www.youtube.com/watch?v=vZ734NWnAHA',\n'Attack of the Clones': 'https://www.youtube.com/watch?v=gYbW1F_c9eM',\n'The Phantom Menace': 'https://www.youtube.com/watch?v=bD7bpG-zDJQ',\n'Revenge of the Sith': 'https://www.youtube.com/watch?v=5UnjrG_N8hU',\n'Return of the Jedi': 'https://www.youtube.com/watch?v=7L8p7_SLzvU',\n'The Empire Strikes Back': 'https://www.youtube.com/watch?v=JNwNXF9Y6kY',\n'The Force Awakens': 'https://www.youtube.com/watch?v=sGbxmsDFVnE'\n}\n\n\n","import React from 'react';\nimport {Go_youtube} from './Go_youtube';\n\nconst Card = ({title, opening_crawl,director,producer,release_date}) => {\n\treturn (\n\t\t<div className = 'tc bg-dark-blue light-silver dib br3 pa4 ma3 grow w-25 shadow-5'>\n\t\t\t<div>\n\t\t\t\t<h2 className='b underline'\t>\n\t\t\t\t\t<a className = 'light-purple'\n\t\t\t\t\thref = {Go_youtube[title]}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t> {title} </a>\n\t\t\t\t</h2>\n\t\t\t\t<h3> Released on {release_date} it was directed by {director} and was \n\t\t\t\tproproduced by {producer}\n\t\t\t\t</h3>\n\t\t\t\t<p>{opening_crawl}</p> \n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({films}) => {\n \n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\tfilms.map((user, i) => {\n\t\t\treturn (\n\t\t\t\t<Card\n\t\t\t\tkey = {1} \n\t\t\t\ttitle={films[i].title} \n\t\t\t\topening_crawl={films[i].opening_crawl} \n\t\t\t\tdirector={films[i].director} \n\t\t\t\tproducer={films[i].producer} \n\t\t\t\trelease_date={films[i].release_date} \n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;","\nfunction Compare(a, b) {\n  const UrlA = a.url.toUpperCase();\n  const UrlB = b.url.toUpperCase();\n\n  let comparison = 0;\n  if (UrlA > UrlB) {\n    comparison = 1;\n  } else if (UrlA < UrlB) {\n    comparison = -1;\n  }\n  return comparison;\n}\n\nexport default Compare;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style = {{overflowY: 'scroll', \n\t\t//border: '1px solid black', \n\t\theight: '600px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport Compare from './Compare';\nimport Scroll from './Scroll';\n\nclass App extends Component  {\n  constructor () {\n    super()\n    this.state = {\n      films: []\n    }\n  }\n\ncomponentDidMount(){\n  fetch(`https://swapi.co/api/films/`)\n    .then(response => response.json())\n    .then(response => response.results)\n    .then(response => response.sort(Compare))\n    .then(movies => this.setState({films: movies}));\n}\n  render (){\n    const {films} = this.state;\n    return(\n    <div className = 'tc'>\n      <header className=\"App-header tc\">\n        <h1 className= 'f1 tc'>Star  Wars</h1>\n        <img className = 'ma4 br4 w-30 tc' alt='StarWars' src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQoozGDrykxkHFNz33fJb7_J9JQuUfCb4SCdU5chl3MotUDtQ_L&s'/>\n      </header>\n      <Scroll>\n        <CardList films = {films}/>\n      </Scroll> \n    </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}